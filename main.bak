#lang play
(require "machine.rkt")
(print-only-errors #t)
;;;;;;;;;;;;;;;;;;;;;;;
;; Language definition
;;;;;;;;;;;;;;;;;;;;;;;

#|
<s-expr> ::= <num>
         | <id>
         | {+ <s-expr> <s-expr>}
         | {- <s-expr> <s-expr>}
         | {with {<s-expr> : <type> <s-expr>} <s-expr>}
         | {fun {<id>  : <type>} [: <type>] <expr>}
         | {<expr> <expr>}

<type> ::= Num
         | {<type> -> <type>}
|#
(deftype Expr
  (num n)
  (add l r)
  (sub l r)
  (id s)
  (fun id targ body tbody)
  (fun-db body)
  (acc n) ;Se usa para la pregunta 3
  (app fun-id arg-expr))

(deftype Type
  (TNum)
  (TFun arg ret))

#|
1. Funciones de primera clase con tipos declarados
|#

#|
parse-type: type -> Type
Parsea la gramática de tipos. En caso de error, retorna el error "Parse error"
|#
(define (parse-type s-expr)
  (match s-expr
    ['Num (TNum)]
    [(list t1 '-> t2) (TFun (parse-type t1) (parse-type t2))]
    [_ (error "Parse Error")]))


(define (parse s-expr) #f)

(define (prettify type) #f)

#|
2. Verificación de Tipos
|#
(define (typeof expr) #f)

(define (typecheck s-expr) #f)

#|
3. Compilación
|#
(define (deBruijn expr) #f)

(define (compile expr) #f)

(define (typed-compile s-expr) #f)
